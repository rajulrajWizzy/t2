/**
 * Fix JWT Edge Runtime Warnings
 * 
 * This script patches jsonwebtoken and related modules to avoid Edge Runtime warnings.
 * It creates module aliases that replace problematic modules with compatible versions.
 */

const fs = require('fs');
const path = require('path');

console.log('üîß Fixing JWT Edge Runtime warnings...');

// Define the directories we need to check
const nodeModulesDir = path.join(process.cwd(), 'node_modules');
const jsonwebtokenDir = path.join(nodeModulesDir, 'jsonwebtoken');
const jwsDir = path.join(nodeModulesDir, 'jws');

// Create shims for problematic files
function createJsonwebtokenShims() {
  const shims = {
    'lib/asymmetricKeyDetailsSupported.js': 'module.exports = function() { return false; };',
    'lib/psSupported.js': 'module.exports = function() { return false; };',
    'lib/rsaPssKeyDetailsSupported.js': 'module.exports = function() { return false; };'
  };

  let modified = 0;

  // Check if jsonwebtoken directory exists
  if (!fs.existsSync(jsonwebtokenDir)) {
    console.log('‚ö†Ô∏è jsonwebtoken directory not found, skipping shims');
    return modified;
  }

  // Create each shim file with a .next-shim extension
  Object.entries(shims).forEach(([filePath, content]) => {
    const fullPath = path.join(jsonwebtokenDir, filePath);
    const shimPath = fullPath + '.next-shim';
    
    // Backup original file if it exists and shim doesn't
    if (fs.existsSync(fullPath) && !fs.existsSync(shimPath)) {
      // Create shim file
      fs.writeFileSync(shimPath, content, 'utf8');
      modified++;
      console.log(`‚úÖ Created shim for ${filePath}`);
    }
  });

  return modified;
}

// Patch jws data-stream.js to avoid process.nextTick
function patchJwsDataStream() {
  const dataStreamPath = path.join(jwsDir, 'lib', 'data-stream.js');
  
  // Check if file exists
  if (!fs.existsSync(dataStreamPath)) {
    console.log('‚ö†Ô∏è jws/lib/data-stream.js not found, skipping patch');
    return 0;
  }
  
  // Read file content
  const originalContent = fs.readFileSync(dataStreamPath, 'utf8');
  const shimPath = dataStreamPath + '.next-shim';
  
  // Check if already patched
  if (fs.existsSync(shimPath)) {
    console.log('‚úÖ jws/lib/data-stream.js already patched');
    return 0;
  }
  
  // Create backup
  fs.writeFileSync(shimPath, originalContent, 'utf8');
  
  // Replace process.nextTick with setTimeout
  const patchedContent = originalContent.replace(
    /process\.nextTick/g, 
    'setTimeout'
  );
  
  // Write patched file
  fs.writeFileSync(dataStreamPath, patchedContent, 'utf8');
  console.log('‚úÖ Patched jws/lib/data-stream.js to use setTimeout instead of process.nextTick');
  
  return 1;
}

// Create a webpack.config.js helper that registers module aliases
function createWebpackHelper() {
  const helperPath = path.join(process.cwd(), 'webpack-jwt-fix.js');
  const helperContent = `
/**
 * Webpack config helper for JWT Edge Runtime compatibility
 * This file is automatically generated - do not edit
 */
module.exports = {
  /**
   * Apply JWT fixes to webpack config
   */
  applyJwtFixes: function(config) {
    if (!config.resolve) config.resolve = {};
    if (!config.resolve.alias) config.resolve.alias = {};
    
    // Add aliases for problematic jsonwebtoken modules
    config.resolve.alias['jsonwebtoken/lib/asymmetricKeyDetailsSupported'] = require.resolve('./node_modules/jsonwebtoken/lib/asymmetricKeyDetailsSupported.js.next-shim');
    config.resolve.alias['jsonwebtoken/lib/psSupported'] = require.resolve('./node_modules/jsonwebtoken/lib/psSupported.js.next-shim');
    config.resolve.alias['jsonwebtoken/lib/rsaPssKeyDetailsSupported'] = require.resolve('./node_modules/jsonwebtoken/lib/rsaPssKeyDetailsSupported.js.next-shim');
    
    return config;
  }
};
`;

  // Only create if it doesn't exist
  if (!fs.existsSync(helperPath)) {
    fs.writeFileSync(helperPath, helperContent, 'utf8');
    console.log('‚úÖ Created webpack-jwt-fix.js helper');
    return 1;
  }
  
  return 0;
}

// Update next.config.js to use our webpack helper
function updateNextConfig() {
  const nextConfigPath = path.join(process.cwd(), 'next.config.js');
  
  // Check if file exists
  if (!fs.existsSync(nextConfigPath)) {
    console.log('‚ö†Ô∏è next.config.js not found, skipping update');
    return 0;
  }
  
  // Read file content
  const originalContent = fs.readFileSync(nextConfigPath, 'utf8');
  
  // Check if already patched
  if (originalContent.includes('webpack-jwt-fix')) {
    console.log('‚úÖ next.config.js already includes JWT webpack fix');
    return 0;
  }
  
  // Create backup
  fs.writeFileSync(nextConfigPath + '.backup', originalContent, 'utf8');
  
  // Add import for webpack helper at the top
  let updatedContent = `// Import JWT webpack fix helper\nconst jwtFix = require('./webpack-jwt-fix');\n\n` + originalContent;
  
  // Find the webpack config section and update it
  const webpackRegex = /webpack\s*:\s*\(\s*config\s*,\s*{\s*isServer\s*}\s*\)\s*=>\s*{/;
  if (webpackRegex.test(updatedContent)) {
    // Update existing webpack config to apply JWT fixes
    updatedContent = updatedContent.replace(
      webpackRegex,
      `webpack: (config, { isServer }) => {\n    // Apply JWT Edge Runtime fixes\n    config = jwtFix.applyJwtFixes(config);\n`
    );
  } else {
    // Add webpack config if it doesn't exist by replacing the nextConfig object
    const nextConfigRegex = /const\s+nextConfig\s*=\s*{/;
    if (nextConfigRegex.test(updatedContent)) {
      updatedContent = updatedContent.replace(
        nextConfigRegex,
        `const nextConfig = {\n  // Apply JWT fixes via webpack\n  webpack: (config, { isServer }) => {\n    config = jwtFix.applyJwtFixes(config);\n    return config;\n  },\n`
      );
    } else {
      console.log('‚ö†Ô∏è Could not locate nextConfig in next.config.js, skipping webpack update');
      return 0;
    }
  }
  
  // Write updated file
  fs.writeFileSync(nextConfigPath, updatedContent, 'utf8');
  console.log('‚úÖ Updated next.config.js to apply JWT webpack fixes');
  
  return 1;
}

// Main function to execute all fixes
async function main() {
  let totalModified = 0;
  
  try {
    totalModified += createJsonwebtokenShims();
    totalModified += patchJwsDataStream();
    totalModified += createWebpackHelper();
    totalModified += updateNextConfig();
    
    console.log(`‚úÖ JWT Edge Runtime fixes completed successfully! Modified ${totalModified} files.`);
    console.log('üîî Note: You may need to restart your development server for changes to take effect.');
  } catch (error) {
    console.error('‚ùå Error applying JWT Edge Runtime fixes:', error);
    process.exit(1);
  }
}

// Run the main function
main(); 